Por: Vanessa Bustos.

# ALGORITMO GILLESPIE (SIMULACIÓN ESTOCÁSTICA) EN REDES DE CONTACTOS CON POBLACIONES DE CÉLULAS Y VIRUS CONSIDERANDO DOS TIPOS DE LIBERACIÓN: LISIS Y BROTE.

# PARTE 1: FUNCIONES AUXILIARES.

# ENTRADA: n_I es el número de individuos deseados y d es el lado de D, el espacio en donde sucede el proceso.
# SALIDA: Matriz Coord de dimensiones n_I x 3 donde cada renglón k contiene el id y las coordenadas (x,y) del individuo k. 
Coloca<-function(n_I,d){
  Coord_x<-runif(n_I,0,d) 
  Coord_y<-runif(n_I,0,d)  
  return(Coord=cbind(c(1:n_I),Coord_x,Coord_y))  
}

# ENTRADA: Coord_v contiene el id y las coordenadas del virus. Coord_c es un vector (en Distancia_Vect) o matriz (en Distancia_Mat) de las células con al menos 3 columnas: id,coord en x, coord en y. r_a es el radio de alcance de los virus.
# SALIDA: Escalar o vector de dimensiones |células|x|virus| cuyas entradas son 1 o 0, dependiendo si las células están al alcance del virus o no. 
Distancia_Vect<-function(Coord_c,Coord_v,r_a){ 
  res<-0
  res<-(Coord_c[2] - Coord_v[2])^2+(Coord_c[3] - Coord_v[3])^2
  res<-res<r_a^2 
  return(as.integer(res))  
}
Distancia_Mat<-function(Coord_c,Coord_v,r_a){ 
  res<-0
  res<-(Coord_c[,2] - Coord_v[2])^2+(Coord_c[,3] - Coord_v[3])^2
  res<-res<r_a^2 
  return(as.integer(res))  
}

# ENTRADA: Coord_c y Coord_v son matrices o vectores (de células y virus) con al menos 3 columnas: id, la coordenada en x y la coordenada en y.
# SALIDA: Matriz, vector o escalar A de tamaño |S|x|S_v|, con A_ij= 1 o 0, dependiendo si la célula i está al alcance del virus j o no.
Mat_Ady<-function(Coord_c,Coord_v,r_a){
  res<-matrix()
  if(is.vector(Coord_c)){
    if(is.vector(Coord_v)){
      res[1]<-Distancia_Vect(Coord_c,Coord_v,r_a)    
    }else if(dim(Coord_v)[1]>1){
      res<-Distancia_Mat(Coord_v,Coord_c,r_a) 
    }
  }else if(dim(Coord_c)[1]>1){
    if(is.vector(Coord_v)){
      res<-Distancia_Mat(Coord_c,Coord_v,r_a)
    }else if(dim(Coord_v)[1]>1){
      res<-Distancia_Mat(Coord_c,Coord_v[1,],r_a)
      for (i in 2:length(Coord_v[,1])) {
        res<-cbind(res,Distancia_Mat(Coord_c,Coord_v[i,],r_a)) 
      }
    }
  }
  return(res)
}

# ENTRADA: d es el lado de D y coord son las coordenadas en x y y de una célula que producirá células o virus con un radio de producción r_p.
# SALIDA: Vector con coordenadas x y y que está a distancia menor a r_p del punto coord.
Coord_Dist<-function(d,r_p,coord){
  v<-array()
  a_1<-as.numeric(coord[1])-min(as.numeric(coord[1]),r_p,na.rm =TRUE)
  b_1<-as.numeric(coord[1])+min(r_p,d-as.numeric(coord[1]),na.rm =TRUE)
  c_1<-min(abs(a_1),abs(b_1),na.rm =TRUE)
  d_1<-max(abs(a_1),abs(b_1),na.rm =TRUE)
  v[1]<-runif(1,c_1,d_1)
  a_2<-as.numeric(coord[2])-min(as.numeric(coord[2]),sqrt(abs(r_p^2-(as.numeric(v[1])-as.numeric(coord[1]))^2)),na.rm =TRUE)
  b_2<-as.numeric(coord[2])+min(d-as.numeric(coord[2]),sqrt(abs(r_p^2-(as.numeric(v[1])-as.numeric(coord[1]))^2)),na.rm =TRUE)
  v[2]<-runif(1,min(abs(a_2),abs(b_2),na.rm =TRUE),max(abs(a_2),abs(b_2),na.rm =TRUE))
  return(v)
}

# ENTRADA: El vector Propensidades que contiene en orden las propensidades de las reacciones posibles en el tiempo actual.
# SALIDA: El índice j de la propensidad (en el vector Propensidades) de la siguiente reacción, que también nos dirá entre cuáles individuos sucederá.
Sig_Reac<-function(Propensidades){
  r_2<-runif(1) 
  p<-cumsum(Propensidades)
  alp_0<-sum(Propensidades)
  res<-min(which(p>=r_2*alp_0))
  return(res) 
} 

# ENTRADA: Matriz Coord de 7 (o 5) columnas que es el histórico de células (o virus), el tiempo t<=tiempo actual al queremos saber cuáles individuos están en la población j y tm el tiempo máximo. 
# SALIDA: Matriz que contiene sólo los id y las coordenadas de los individuos que pertenecen a la población j al tiempo t.
Pob_Cel<-function(Coord,t,j,tm){
  aux<-1
  Coord_t<-array()
  long_r<-0
  if(is.matrix(Coord) & t<tm){
    n_r<-dim(Coord)[1]
    if(j==1 | j==2 | j==3){
      for(i in 1:n_r){
        if(t<Coord[i,7] | Coord[i,7]==-1){  #=
          if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t & t<Coord[i,j+4]){#=
            Coord_t<-rbind(Coord_t,c(0,0,0))
            Coord_t[aux,]<-Coord[i,1:3]
            aux<-aux+1
          }else if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t & Coord[i,j+4]==-1){
            Coord_t<-rbind(Coord_t,c(0,0,0))
            Coord_t[aux,]<-Coord[i,1:3] 
            aux<-aux+1
          }
        }
      }  
    }else if(j==4){
      for(i in 1:n_r){
        if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t){ 
          Coord_t<-rbind(Coord_t,c(0,0,0))
          Coord_t[aux,]<-Coord[i,1:3]
          aux<-aux+1
        }
      }
    }
    if(aux!=1)
      Coord_t<-Coord_t[-dim(Coord_t)[1],]
  }else if(is.vector(Coord) & t<tm){
    if(j==1 | j==2 | j==3){
      if(t<=Coord[7] | Coord[7]==-1){  
        if(Coord[j+3]!=-1 & Coord[j+3]<=t & t<Coord[j+4]){#=
          Coord_t<-Coord[1:3]
          aux<-aux+1
        }else if(Coord[j+3]!=-1 & Coord[j+3]<=t & Coord[j+4]==-1){
          Coord_t<-Coord[1:3] 
          aux<-aux+1
        }
      }
    }else if(j==4){
      if(Coord[j+3]!=-1 & Coord[j+3]<=t){  
        Coord_t<-Coord[1:3]
        aux<-aux+1
      }
    }
  }
  return(list(Coord_t=Coord_t,long_r=aux-1))
}

Pob_V<-function(Coord,t,j,tm){
  aux<-1
  Coord_t<-array()
  long_r<-0
  if(is.matrix(Coord) & t<=tm){
    n_r<-dim(Coord)[1]    
    if(j==1){
      for(i in 1:n_r){
        if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t & t<Coord[i,j+4]){#=
          Coord_t<-rbind(Coord_t,c(0,0,0)) 
          Coord_t[aux,]<-Coord[i,1:3]
          aux<-aux+1
        }else if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t & Coord[i,j+4]==-1){
          Coord_t<-rbind(Coord_t,c(0,0,0))
          Coord_t[aux,]<-Coord[i,1:3] 
          aux<-aux+1
        }
      } 
    }else if(j==2){
      for(i in 1:n_r){
        if(Coord[i,j+3]!=-1 & Coord[i,j+3]<=t){  
          Coord_t<-rbind(Coord_t,c(0,0,0))
          Coord_t[aux,]<-Coord[i,1:3]
          aux<-aux+1
        }
      }
    }
    if(aux!=1)
      Coord_t<-Coord_t[-dim(Coord_t)[1],]
  }else if(is.vector(Coord) & t<=tm){
    if(j==1){
      if(Coord[j+3]!=-1 & Coord[j+3]<=t & t<Coord[j+4]){#=
        Coord_t<-Coord[1:3]
        aux<-aux+1
      }else if(Coord[j+3]!=-1 & Coord[j+3]<=t & Coord[j+4]==-1){
        Coord_t<-Coord[1:3] 
        aux<-aux+1
      }
    }else if(j==2){
      if(Coord[j+3]!=-1 & Coord[j+3]<=t){  
        Coord_t<-Coord[1:3]
        aux<-aux+1
      }
    }
  }
  return(list(Coord_t=Coord_t,long_r=aux-1))
}

# PARTE 2: FUNCIONES GILLESPIE      

# ENTRADA: 
# d es el lado de D.
# tm es el tiempo máximo (aproximado) al que queremos ejecutar reacciones. 
# m es la cantidad de virus que se producen en cada liberación por Lisis.
# S y S_v son matrices que contienen los id y las coordenadas de los individuos.
# r_a y r_p son los radios de alcance y de producción, respectivamente.
# alp es la tasa de natalidad de células S.
# mu_c es la tasa de mortalidad de células S,E,I (para I sólo en el caso de Brote).
# lamb es la tasa de exposición de una célula sana a un virus.
# del en Lisis es la tasa de la reacción que produce liberación de virus y muerte instantánea de la célula infectada (pasa de la población de E a R_I), 
# mientras que en Brote representa a la tasa de infección de una célula expuesta.
# gam es la tasa de liberación de un virus a partir de una célula infectada en Brote.
# mu_v es la tasa de mortalidad de los virus.

# SALIDA:
# El vector tiempo_hist que contiene, empezando por 0, los tiempos a los cuales sucedieron las reacciones. 
# La historia del proceso en dos matrices: Hist_Sist_Cel e Hist_Sist_V (de 7 y 5 columnas, resp.), que contienen todos los individuos del proceso.
# Las primeras tres columnas contienen los id y sus coordenadas, mientras que las siguientes columnas contienen los tiempos
# a los cuales entraron en cada población. Si no llegaron a alguna población, entonces se indica con un -1.
Gillespie_Redes_Lisis<-function(d,tm,m,S,S_v,r_a,r_p,alp,mu_c,lamb,del,mu_v){ 
  tiempo<-0
  tiempo_hist<-array()
  tiempo_hist[1]<-0
  P<-c(dim(S)[1],0,0,0,dim(S_v)[1],0) 
  s_c<-seq(1,P[1])
  e<-r_i<-array()
  s_v<-seq(1,P[5])
  Hist_Sist_Cel<-cbind(S,rep(0,P[1]),rep(-1,P[1]),rep(-1,P[1]),rep(-1,P[1]))
  Hist_Sist_V<-cbind(S_v,rep(0,P[5]),rep(-1,P[5]))
  A<-Mat_Ady(S,S_v,r_a) 
  rm(S)
  rm(S_v)
  n_e<-sum(A,na.rm = TRUE)
  i<-2
  while(tiempo_hist[i-1]<tm & P[1]+P[2]+P[5]>0){  
    Propensidades<-c(rep(alp,P[1])    # Nacimiento de S
                     ,rep(mu_c,P[1])  # Muerte de S
                     ,rep(mu_c,P[2])  # Muerte de E
                     ,rep(lamb,n_e)   # Exposición
                     ,rep(del,P[2])   # Infección: Liberación y muerte de la célula infectada 
                     ,rep(mu_v,P[5])) # Muerte de virus
    Tipos_Reacciones<-c(rep(1,P[1]),rep(2,P[1]),rep(3,P[2]),rep(4,n_e),rep(5,P[2]),rep(6,P[5]))
    tiempo<-rexp(1,sum(Propensidades)) # Tiempos de espera entre reacciones.
    tiempo_hist[i]<-tiempo_hist[i-1]+tiempo
    sig<-Sig_Reac(Propensidades)
    tipo_sig<-Tipos_Reacciones[sig]
    if(tipo_sig==1 & P[1]>0){ # Nacimiento de S            
      wa_p<-s_c[sig]
      cel_prod<-Hist_Sist_Cel[wa_p,2:3]          
      p<-Coord_Dist(d,r_p,cel_prod)
      s_c<-c(s_c,dim(Hist_Sist_Cel)[1]+1)
      Hist_Sist_Cel<-rbind(Hist_Sist_Cel,c(dim(Hist_Sist_Cel)[1]+1,p[1],p[2],tiempo_hist[i],-1,-1,-1))
      if(P[5]==0){
        A<-matrix() 
      }else if(P[5]==1){
        A<-c(A,Mat_Ady(c(1,p[1],p[2]),Hist_Sist_V[s_v,1:3],r_a))
      }else if(P[5]>1){
        A<-rbind(A,Mat_Ady(c(1,p[1],p[2]),Hist_Sist_V[s_v,1:3],r_a))
      }
      n_e<-sum(A,na.rm = TRUE)
      P[1]<-as.numeric(P[1])+1
    }else if(tipo_sig==2 & P[1]>0){# Muerte de S  
      wa_p<-s_c[sig-P[1]]
      s_c<-s_c[-(sig-P[1])]
      Hist_Sist_Cel[wa_p,7]<-tiempo_hist[i]
      if(P[1]==1){
        A<-matrix()
      }else if(P[1]>1 & P[5]==1){
        A<-A[-(sig-P[1])]
      }else if(P[1]>1 & P[5]>1){
        A<-A[-(sig-P[1]),]
      }  
      n_e<-sum(A,na.rm = TRUE)         
      P[1]<-as.numeric(P[1])-1
      P[4]<-as.numeric(P[4])+1
    }else if(tipo_sig==3 & P[2]>0){# Muerte de E  
      wa_p<-e[sig-2*P[1]]
      e<-e[-(sig-2*P[1])]
      Hist_Sist_Cel[wa_p,7]<-tiempo_hist[i]
      P[2]<-as.numeric(P[2])-1
      P[4]<-as.numeric(P[4])+1
    }else if(tipo_sig==4 & P[1]>0 & P[5]>0 & is.numeric(n_e) & n_e>0){# Exposición
      WA<-which(A==1,arr.ind = TRUE)
      if(P[1]==1 & P[5]==1){
        c_e<-v_e<-1
      }else if(P[1]==1 & P[5]>1){
        c_e<-1
        v_e<-s_v[sig-2*P[1]-P[2]]
      }else if(P[5]==1 & P[1]>1){
        c_e<-s_c[sig-2*P[1]-P[2]]
        v_e<-1
      }else if(P[1]>1 & P[5]>1){
        c_e<-WA[sig-2*P[1]-P[2],1] 
        v_e<-WA[sig-2*P[1]-P[2],2]  
      }
      id_c<-s_c[c_e]
      id_v<-s_v[v_e]
      s_c<-s_c[-c_e]
      s_v<-s_v[-v_e]
      Hist_Sist_Cel[id_c,5]<-tiempo_hist[i]
      Hist_Sist_V[id_v,5]<-tiempo_hist[i]
      if(P[1]==1 | P[5]==1){
        A<-matrix()
      }else if(P[1]>1 & P[5]>1){
        A<-A[-c_e,-v_e]
      }         
      P[1]<-as.numeric(P[1])-1
      P[2]<-as.numeric(P[2])+1
      P[5]<-as.numeric(P[5])-1
      P[6]<-as.numeric(P[6])+1
      n_e<-sum(A,na.rm = TRUE)
      e[P[2]]<-id_c
      sort(e)
    }else if(tipo_sig==5 & P[2]>0){# Liberación de virus y muerte de célula: E->R_I  
      wa_p<-e[sig-2*P[1]-P[2]-n_e]
      cel_prod<-Hist_Sist_Cel[wa_p,2:3]               
      e<-e[-(sig-2*P[1]-P[2]-n_e)]
      Hist_Sist_Cel[wa_p,6]<-tiempo_hist[i]
      P[2]<-as.numeric(P[2])-1
      P[3]<-as.numeric(P[3])+1             
      r_i[P[3]]<-wa_p              
      sort(r_i)
      for(j in 1:m){
        p<-Coord_Dist(d,r_p,cel_prod)  
        s_v<-c(s_v,dim(Hist_Sist_V)[1]+1)
        Hist_Sist_V<-rbind(Hist_Sist_V,c(dim(Hist_Sist_V)[1]+1,p[1],p[2],tiempo_hist[i],-1)) 
        if(P[1]==0){
          A<-matrix()
        }else if(P[1]>0 & P[5]==0){
          A<-Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a) 
        }else if(P[1]==1 & P[5]>0){
          A<-c(A,Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a)) 
        }else if(P[1]>1 & P[5]>0){
          A<-cbind(A,Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a))
        }
        P[5]<-as.numeric(P[5])+1
      }
      n_e<-sum(A,na.rm = TRUE)
     
    }else if(tipo_sig==6 & P[5]>0){# Muerte de virus 
      aux<-sig-2*P[1]-2*P[2]-n_e
      wa_p<-s_v[aux]
      s_v<-s_v[-aux]
      Hist_Sist_V[wa_p,5]<-tiempo_hist[i]
      if(P[5]==1 | P[1]==0){
        A<-matrix()
      }else if(P[1]==1 & P[5]>1){ 
        A<-A[-aux]
      }else if(P[1]>1 & P[5]>1){
        A<-A[,-aux] 
      }
      n_e<-sum(A,na.rm = TRUE)
      P[5]<-as.numeric(P[5])-1
      P[6]<-as.numeric(P[6])+1
    }
    print(tiempo_hist[i])
    i<-i+1
  }
  return(list(tiempo_hist=tiempo_hist,Hist_Sist_Cel=Hist_Sist_Cel,Hist_Sist_V=Hist_Sist_V)) 
} 

Gillespie_Redes_Brote<-function(d,tm,S,S_v,r_a,r_p,alp,mu_c,lamb,del,gam,mu_v){ 
  tiempo<-0
  tiempo_hist<-array()
  tiempo_hist[1]<-0
  P<-c(dim(S)[1],0,0,0,dim(S_v)[1],0) 
  s_c<-seq(1,P[1])
  e<-s_i<-array()
  s_v<-seq(1,P[5])
  Hist_Sist_Cel<-cbind(S,rep(0,P[1]), rep(-1,P[1]),rep(-1,P[1]),rep(-1,P[1]))
  Hist_Sist_V<-cbind(S_v,rep(0,P[5]),rep(-1,P[5])) 
  A<-Mat_Ady(S,S_v,r_a)
  rm(S)
  rm(S_v)
  n_e<-sum(A,na.rm = TRUE)
  i<-2
  while(tiempo_hist[i-1]<tm & P[1]+P[2]+P[3]+P[5]>0){  
    Propensidades<-c(rep(alp,P[1]),   # Nacimiento de S
                     rep(mu_c,P[1]),  # Muerte de S 
                     rep(mu_c,P[2]),  # Muerte de E
                     rep(mu_c,P[3]),  # Muerte de I
                     rep(lamb,n_e),   # Exposición 
                     rep(del,P[2]),   # Infección 
                     rep(gam,P[3]),   # Liberación de virus
                     rep(mu_v,P[5]))  # Muerte de S_v
    Tipos_Reacciones<-c(rep(1,P[1]),rep(2,P[1]),rep(3,P[2]),rep(4,P[3]),rep(5,n_e),rep(6,P[2]),rep(7,P[3]),rep(8,P[5]))
    tiempo<-rexp(1,sum(Propensidades)) 
    tiempo_hist[i]<-tiempo_hist[i-1]+tiempo
    sig<-Sig_Reac(Propensidades) 
    tipo_sig<-Tipos_Reacciones[sig] 
    if(tipo_sig==1 & P[1]>0){ # Nacimiento de S
      wa_p<-s_c[sig]
      cel_prod<-Hist_Sist_Cel[wa_p,2:3]           
      p<-Coord_Dist(d,r_p,cel_prod) 
      s_c<-c(s_c,dim(Hist_Sist_Cel)[1]+1)
      Hist_Sist_Cel<-rbind(Hist_Sist_Cel,c(dim(Hist_Sist_Cel)[1]+1,p[1],p[2],tiempo_hist[i],-1,-1,-1))
      if(P[5]==0){
        A<-matrix()
      }else if(P[5]==1){
        A<-c(A,Mat_Ady(c(1,p[1],p[2]),Hist_Sist_V[s_v,1:3],r_a))
      }else if(P[5]>1){
        A<-rbind(A,Mat_Ady(c(1,p[1],p[2]),Hist_Sist_V[s_v,1:3],r_a))
      }
      n_e<-sum(A,na.rm = TRUE)
      P[1]<-as.numeric(P[1])+1
    }else if(tipo_sig==2 & P[1]>0){ # Muerte de S  
      wa_p<-s_c[sig-P[1]]
      s_c<-s_c[-(sig-P[1])]
      Hist_Sist_Cel[wa_p,7]<-tiempo_hist[i]
      if(P[1]==1){
        A<-matrix()
      }else if(P[1]>1 & P[5]==1){
        A<-A[-(sig-P[1])]
      }else if(P[1]>1 & P[5]>1){
        A<-A[-(sig-P[1]),]
      }  
      n_e<-sum(A,na.rm = TRUE)
      P[1]<-as.numeric(P[1])-1
      P[4]<-as.numeric(P[4])+1
    }else if(tipo_sig==3 & P[2]>0){ # Muerte de E  
      wa_p<-e[sig-2*P[1]]
      e<-e[-(sig-2*P[1])]
      Hist_Sist_Cel[wa_p,7]<-tiempo_hist[i]
      P[2]<-as.numeric(P[2])-1
      P[4]<-as.numeric(P[4])+1
    }else if(tipo_sig==4 & P[3]>0){ #Muerte de I  
      wa_p<-s_i[sig-(2*P[1]+P[2])]
      s_i<-s_i[-(sig-(2*P[1]+P[2]))]
      Hist_Sist_Cel[wa_p,7]<-tiempo_hist[i]
      P[3]<-as.numeric(P[3])-1
      P[4]<-as.numeric(P[4])+1
    }else if(tipo_sig==5 & P[1]>0 & P[5]>0 & is.numeric(n_e) & n_e>0){ # Exposición                 
      WA<-which(A==1,arr.ind = TRUE)
      if(P[1]==1 & P[5]==1){
        c_e<-v_e<-1  
      }else if(P[1]==1 & P[5]>1){
        c_e<-1
        v_e<-s_v[sig-2*P[1]-P[2]-P[3]]  
      }else if(P[5]==1 & P[1]>1){
        c_e<-s_c[sig-2*P[1]-P[2]-P[3]]
        v_e<-1  
      }else if(P[1]>1 & P[5]>1){
        c_e<-WA[sig-2*P[1]-P[2]-P[3],1] 
        v_e<-WA[sig-2*P[1]-P[2]-P[3],2] 
      }
      id_c<-s_c[c_e]
      id_v<-s_v[v_e]
      s_c<-s_c[-c_e]
      s_v<-s_v[-v_e]
      Hist_Sist_Cel[id_c,5]<-tiempo_hist[i]
      Hist_Sist_V[id_v,5]<-tiempo_hist[i]
      if(P[1]==1 | P[5]==1){
        A<-matrix()
      }else if(P[1]>1 & P[5]>1){
        A<-A[-c_e,-v_e]       
      }
      P[1]<-as.numeric(P[1])-1
      P[2]<-as.numeric(P[2])+1
      P[5]<-as.numeric(P[5])-1
      P[6]<-as.numeric(P[6])+1
      n_e<-sum(A,na.rm = TRUE)
      e[P[2]]<-id_c       
      sort(e)
    }else if(tipo_sig==6 & P[2]>0){ #Infección                          
      wa_p<-e[sig-(2*P[1]+P[2]+P[3]+n_e)]
      e<-e[-(sig-(2*P[1]+P[2]+P[3]+n_e))]
      Hist_Sist_Cel[wa_p,6]<-tiempo_hist[i]
      P[2]<-as.numeric(P[2])-1
      P[3]<-as.numeric(P[3])+1
      s_i[P[3]]<-wa_p        
      sort(s_i)
    }else if(tipo_sig==7 & P[3]>0){ # Liberación de virus                 
      wa_p<-s_i[sig-(2*P[1]+2*P[2]+P[3]+n_e)]
      cel_prod<-Hist_Sist_Cel[wa_p,2:3]         
      p<-Coord_Dist(d,r_p,cel_prod)     
      s_v<-c(s_v,dim(Hist_Sist_V)[1]+1)
      Hist_Sist_V<-rbind(Hist_Sist_V,c(dim(Hist_Sist_V)[1]+1,p[1],p[2],tiempo_hist[i],-1))
      if(P[1]==0){
        A<-matrix()
      }else if(P[1]>0 & P[5]==0){
        A<-Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a)
      }else if(P[1]==1 & P[5]>0){
        A<-c(A,Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a))
      }else if(P[1]>1 & P[5]>0){
        A<-cbind(A,Mat_Ady(Hist_Sist_Cel[s_c,1:3],c(1,p[1],p[2]),r_a))
      }
      n_e<-sum(A,na.rm = TRUE)
      P[5]<-as.numeric(P[5])+1
    }else if(tipo_sig==8 & P[5]>0){ #Muerte de S_v                     
      aux<-sig-(2*P[1]+2*P[2]+2*P[3]+n_e)
      wa_p<-s_v[aux]
      s_v<-s_v[-aux]
      Hist_Sist_V[wa_p,5]<-tiempo_hist[i]
      if(P[5]==1 | P[1]==0){
        A<-matrix()
      }else if(P[1]==1 & P[5]>1){ 
        A<-A[-aux]
      }else if(P[1]>1 & P[5]>1){
        A<-A[,-aux] 
      }  
      n_e<-sum(A,na.rm = TRUE)
      P[5]<-as.numeric(P[5])-1
      P[6]<-as.numeric(P[6])+1
    }
    print(tiempo_hist[i])
    i<-i+1
  }
  return(list(tiempo_hist=tiempo_hist,Hist_Sist_Cel=Hist_Sist_Cel,Hist_Sist_V=Hist_Sist_V))
} 

# PARTE 3: EXPERIMENTACIÓN Y ALMACENAMIENTO DE DATOS 

# Parámetros utilizados:
d<-10               
r_p<-3                        
S<-Coloca(3000,d)      
S_v<-Coloca(100,d)    
tm<-12                  
m<-100                
r_a<-2                             
alp<-0.3                  
mu_c<-0.1475              
lamb<-0.002
del<- 0.24
gam<-14.75 
mu_v<-3

# Experimentación con Lisis:

tiempo_ej_l<-proc.time() # Para guardar el tiempo que tardó en realizar el experimento
G_l<-Gillespie_Redes_Lisis(d,tm,m,S,S_v,r_a,r_p,alp,mu_c,lamb,del,mu_v) 
t_l<-proc.time()-tiempo_ej_l
t_l

# Guardamos los datos de Gillespie para Lisis en archivos de texto

z_1<-data.frame(G_l$tiempo_hist)
z_2<-data.frame(G_l$Hist_Sist_Cel)
colnames(z_2)<-c("id", "Coord_x", "Coord_y", "S", "E", "R_I", "R")
z_3<-data.frame(G_l$Hist_Sist_V)
colnames(z_3)<-c("id", "Coord_x", "Coord_y", "S_v", "R_v")

write.table(z_1, file = "Histórico de tiempos de Gillespie en Lisis.txt") 
write.table(z_2, file = "Histórico de Células de Gillespie en Lisis.txt") 
write.table(z_3, file = "Histórico de Virus de Gillespie en Lisis.txt")
rm(G_l);rm(z_1); rm(z_2); rm(z_3)

# Experimentación con Brote:

tiempo_ej_b<-proc.time() # Para guardar el tiempo que tardó en realizar el experimento
G_b<-Gillespie_Redes_Brote(d,tm,S,S_v,r_a,r_p,alp,mu_c,lamb,del,gam,mu_v) 
t_b<-proc.time()-tiempo_ej_b
t_b

# Guardamos los datos de Gillespie para Brote en archivos de texto

x_1<-data.frame(G_b$tiempo_hist)
x_2<-data.frame(G_b$Hist_Sist_Cel)
colnames(x_2)<-c("id", "Coord_x", "Coord_y", "S", "E", "I", "R")
x_3<-data.frame(G_b$Hist_Sist_V)
colnames(x_3)<-c("id", "Coord_x", "Coord_y", "S_v", "R_v")

write.table(x_1, file = "Histórico de tiempos de Gillespie en Brote.txt") 
write.table(x_2, file = "Histórico de Células de Gillespie en Brote.txt") 
write.table(x_3, file = "Histórico de Virus de Gillespie en Brote.txt") 
rm(G_b);rm(x_1); rm(x_2); rm(x_3)

# Funciones para recuperar los datos históricos guardados en los archivos de texto.

# ENTRADA: Archivo del tiempo histórico
# SALIDA: Modo numérico de los datos, listo para aplicar las funciones de visualizaciones.
# Mandar llamar como Leer_tiempo(file="Archivo.txt") 
Leer_tiempo<-function(file){ 
  a<-read.table(file, header=TRUE)
  b<-as.numeric(unlist(a)) 
  return(b)
}

#tiem_l<-Leer_tiempo(file="Histórico de tiempos de Gillespie en Lisis.txt")
#tiem_b<-Leer_tiempo(file="Histórico de tiempos de Gillespie en Brote.txt")

# ENTRADA: Archivo y número de columnas
# SALIDA: Modo numérico de los datos, listo para aplicar las visualizaciones.
# Mandar llamar como Leer_Hist(file="Archivo.txt",col)
Leer_Hist<-function(file,col){
  a<-read.table(file, header=TRUE)
  b<-as.numeric(unlist(a)) 
  reng<-length(b)/col
  M<-matrix(rep(0,length(b)),nrow=reng,ncol=col,byrow=FALSE)
  for(j in 1:reng){
    for(i in 1:col){
      M[j,i]<-b[(i-1)*reng+j]
    }
  }
  return(M)
}

M_Cel_l<-Leer_Hist(file="Histórico de Células de Gillespie en Lisis.txt",7)
M_V_l<-Leer_Hist(file="Histórico de Virus de Gillespie en Lisis.txt",5)
M_Cel_b<-Leer_Hist(file="Histórico de Células de Gillespie en Brote.txt",7)
M_V_b<-Leer_Hist(file="Histórico de Virus de Gillespie en Brote.txt",5)

# PARTE 4: VISUALIZACIÓN DE LAS POBLACIONES EN LOS EXPERIMENTOS 

# Función para dibujar vecindades en las coordenadas donde se encuentran las células.

# ENTRADA: Coordenada en x, coordenada en y, lado l_v de la vecindad.
# SALIDA: Dibujo de la vecindad cuadrada de lado l_v cuyo centro está en la coordenada dada.
rects_cen<-function(x,y,l_v,col=NA){
  rect(x-l_v/2,y-l_v/2,x+l_v/2,y+l_v/2, col=col, border=NA)
}

# Funciones para extraer las poblaciones de células y virus vivos en Lisis y Brote.

# ENTRADA: Históricos de células y de virus, el tiempo actual t y el tiempo máximo tm
# SALIDA: las coordenadas de las poblaciones de Lisis o de Brote al tiempo t 
ext_pob_Lisis<-function(Celulas,Virus,t,tm){ 
  ps<-Pob_Cel(Celulas,t,1,tm)$Coord_t
  pe<-Pob_Cel(Celulas,t,2,tm)$Coord_t
  pv<-Pob_V(Virus,t,1,tm)$Coord_t
  return(list(ps=ps,pe=pe,pv=pv))
}

ext_pob_Brote<-function(Celulas,Virus,t,tm){
  ps<-Pob_Cel(Celulas,t,1,tm)$Coord_t
  pe<-Pob_Cel(Celulas,t,2,tm)$Coord_t
  p_i<-Pob_Cel(Celulas,t,3,tm)$Coord_t
  pv<-Pob_V(Virus,t,1,tm)$Coord_t
  return(list(ps=ps,pe=pe,p_i=p_i,pv=pv))
}

# Funciones para visualizar las poblaciones de células y virus vivos en Lisis y Brote.

# ENTRADA:
# d es la longitud de cada lado en el espacio D
# ps es la posición de las células sanas, una matriz de |S|x2
# pe es la posición de las células expuestas, una matriz de |E|x2
# pv es la posición de los virus, una matriz de |S_v|x2
# SALIDA: Gráfica
# Las células se  dibujan como vecindades cuadradas de lado l_v en sus coordenadas y los virus como puntos.

visual_Lisis<-function(d,ps,pe,pv,l_v){
  plot(c(0,0),c(0,0),xlab="",ylab="",main="Gillespie en Lisis con r_a=2 y r_p=3", xlim=c(0,d+1),ylim=c(0,d+1),t="n")
  legend("topright", legend=c("S", "E", "S_v"),col=c("turquoise1", "limegreen", "red"), pch=c(15,15,20), cex=0.8)
  
  if(is.vector(ps))
    rects_cen(ps[2],ps[3],l_v=0.2,col="turquoise1")    
  if(is.vector(pe))
    rects_cen(pe[2],pe[3],l_v=0.2,col="limegreen")
  if(is.vector(pv))
    points(pv[2],pv[3],col="white",bg=rgb(1,0,0,0.7),pch=21,cex=1) 
  
  if(is.matrix(ps))
    rects_cen(ps[,2],ps[,3],l_v=0.2,col="turquoise1") 
  if(is.matrix(pe))
    rects_cen(pe[,2],pe[,3],l_v=0.2,col="limegreen")
  if(is.matrix(pv))                                
    points(pv[,2],pv[,3],col="white",bg=rgb(1,0,0,0.7),pch=21,cex=1)
}

# ENTRADA:
# d es la longitud de cada lado en el espacio D
# ps es la posición de las células sanas, una matriz de |S|x2
# pe es la posición de las células expuestas, una matriz de |E|x2
# pi es la posición de las células infectadas, una matriz de |I|x2
# pv es la posición de los virus, una matriz de |S_v|x2
# SALIDA: Gráfica
# Las células se  dibujan como vecindades cuadradas de lado l_v en sus coordenadas y los virus como puntos.
visual_Brote<-function(d,ps,pe,p_i,pv,l_v){
  plot(c(0,0),c(0,0),xlab="",ylab="",main="Gillespie en Brote con r_a=2 y r_p=3",xlim=c(0,d+1),ylim=c(0,d+1),t="n")
  legend("topright", legend=c("S", "E", "I","S_v"),col=c("turquoise1","limegreen","coral","red"), pch=c(15,15,15,20), cex=0.8)
  
  if(is.vector(ps))
    rects_cen(ps[2],ps[3],l_v=0.2,col="turquoise1") 
  if(is.vector(pe))
    rects_cen(pe[2],pe[3],l_v=0.2,col="limegreen")
  if(is.vector(p_i))
    rects_cen(p_i[2],p_i[3],l_v=0.2,col="coral") 
  if(is.vector(pv))
    points(pv[2],pv[3],col="white",bg=rgb(1,0,0,0.7),pch=21,cex=1)
  
  if(is.matrix(ps))
    rects_cen(ps[,2],ps[,3],l_v=0.2,col="turquoise1") 
  if(is.matrix(pe))
    rects_cen(pe[,2],pe[,3],l_v=0.2,col="limegreen")
  if(is.matrix(p_i))
    rects_cen(p_i[,2],p_i[,3],l_v=0.2,col="coral") 
  if(is.matrix(pv))
    points(pv[,2],pv[,3],col="white",bg=rgb(1,0,0,0.7),pch=21,cex=1) 
}

# Funciones que nos regresa la visualización de las poblaciones con individuos vivos después de ejecutar Gillespie

# ENTRADA: Lado del espacio d, Matrices Hist_Sist_Cel, Hist_Sist_V, l_v tamaño de las vecindades de las células, tiempo t actual, tiempo máximo tm
# SALIDA: Gráfica
visual_Gillespie_Lisis<-function(d,Celulas,Virus,l_v,t,tm){
  pob<-ext_pob_Lisis(Celulas,Virus,t,tm)
  visual_Lisis(d,pob$ps,pob$pe,pob$pv,l_v)
}

visual_Gillespie_Brote<-function(d,Celulas,Virus,l_v,t,tm){
  pob<-ext_pob_Brote(Celulas,Virus,t,tm)
  visual_Brote(d,pob$ps,pob$pe,pob$p_i,pob$pv,l_v)
}

# Para guardar las visualizaciones junto con los tamaños de las poblaciones:

for(i in 0:tm){
  print(paste("Poblaciones al tiempo t=",i))
  print(c(Pob_Cel(M_Cel_l,i,1,12.0001)$long_r,Pob_Cel(M_Cel_l,i,2,12.0001)$long_r,Pob_Cel(M_Cel_l,i,3,12.0001)$long_r,Pob_Cel(M_Cel_l,i,4,12.0001)$long_r,Pob_V(M_V_l,i,1,12.0001)$long_r,Pob_V(M_V_l,i,2,12.0001)$long_r))
  print("--------")
  pdf(paste("Evolución de Gillespie en Lisis al tiempo t=",i,".pdf"))
  visual_Gillespie_Lisis(d,M_Cel_l,M_V_l,0.2,12,12.0001)
  dev.off()
}

for(i in 0:tm){
  print(paste("Poblaciones al tiempo t=",i))
  print(c(Pob_Cel(M_Cel_b,i,1,12.000004)$long_r,Pob_Cel(M_Cel_b,i,2,12.000004)$long_r,Pob_Cel(M_Cel_b,i,3,12.000004)$long_r,Pob_Cel(M_Cel_b,i,4,12.000004)$long_r,Pob_V(M_V_b,i,1,12.000004)$long_r,Pob_V(M_V_b,i,2,12.000004)$long_r))
  print("--------")
  pdf(paste("Evolución de Gillespie en Brote al tiempo t=",i,".pdf"))
  visual_Gillespie_Brote(d,M_Cel_b,M_V_b,0.2,i,tm)
  dev.off()
}

# Funciones que nos dan las gráficas de la evolución de las poblaciones (Lisis y Brote) a lo largo de todo el proceso.

# ENTRADA: Matriz de Históricos (de células o virus), tiempo empírico t_emp>t_m pero menor que el de la última reacción, el paso que daremos en el tiempo al graficar.
# SALIDA: Gráfica.
Graf_Cel_L<-function(Hist_Cel,t_emp,paso){
  tiempo<-seq(0,12,by=paso)
  p_b<-c(Pob_Cel(Hist_Cel,tiempo[1],1,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[1],2,t_emp)$long_r,
         Pob_Cel(Hist_Cel,tiempo[1],3,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[1],4,t_emp)$long_r)   
  for(i in 2:length(tiempo)){
    p_b<-rbind(p_b,c(Pob_Cel(Hist_Cel,tiempo[i],1,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[i],2,t_emp)$long_r,
                     Pob_Cel(Hist_Cel,tiempo[i],3,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[i],4,t_emp)$long_r))
  }
  plot(tiempo,p_b[,1],main="Células de Gillespie en Lisis", type = "l", frame = FALSE,col = "turquoise1", xlab = "Tiempo (días)", ylab = "Individuos",ylim=c(0,4000), lty = 1, lwd = 2)
  lines(tiempo,p_b[,2],  col = "limegreen", type = "l", lty = 1, lwd = 2)
  lines(tiempo,p_b[,3] ,  col = "coral", type = "l", lty = 1, lwd = 2)
  lines(tiempo,p_b[,4] , col = "darkorchid", type = "l", lty = 1, lwd = 2)
  legend("right", legend = c("S","E","R_I","R"), col = c("turquoise1","limegreen","coral","darkorchid"), lty = c(1,1,1,1), cex = 0.5)
}

Graf_Cel_B<-function(Hist_Cel,t_emp,paso){
  tiempo<-seq(0,12,by=paso)
  p_b<-c(Pob_Cel(Hist_Cel,tiempo[1],1,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[1],2,t_emp)$long_r,
         Pob_Cel(Hist_Cel,tiempo[1],3,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[1],4,t_emp)$long_r)   
  for(i in 2:length(tiempo)){
    p_b<-rbind(p_b,c(Pob_Cel(Hist_Cel,tiempo[i],1,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[i],2,t_emp)$long_r,
                     Pob_Cel(Hist_Cel,tiempo[i],3,t_emp)$long_r,Pob_Cel(Hist_Cel,tiempo[i],4,t_emp)$long_r))
  }
  plot(tiempo,p_b[,1],main="Células de Gillespie en Brote", type = "l", frame = FALSE,col = "turquoise1", xlab = "Tiempo (días)", ylab = "Individuos",ylim=c(0,8000), lty = 1, lwd = 2)
  lines(tiempo,p_b[,2], col = "limegreen", type = "l", lty = 1, lwd = 2)
  lines(tiempo,p_b[,3] , col = "coral", type = "l", lty = 1, lwd = 2)
  lines(tiempo,p_b[,4] , col = "darkorchid", type = "l", lty = 1, lwd = 2)
  legend("topright", legend = c("S","E","I","R"), col = c("turquoise1","limegreen","coral","darkorchid"), lty = c(1,1,1,1), cex = 0.5)
}

Graf_V<-function(Hist_V,t_emp,paso){
  tiempo<-seq(0,12,by=paso)
  p_b<-c(Pob_V(Hist_V,tiempo[1],1,t_emp)$long_r,Pob_V(Hist_V,tiempo[1],2,t_emp)$long_r)   
  for(i in 2:length(tiempo)){
    p_b<-rbind(p_b,c(Pob_V(Hist_V,tiempo[i],1,t_emp)$long_r,Pob_V(Hist_V,tiempo[i],2,t_emp)$long_r))
   print(tiempo[i])
  }
  plot(tiempo,p_b[,1],main="Virus de Gillespie en Lisis", type = "l", frame = FALSE,col = "mediumblue", xlab = "Tiempo (días)", ylab = "Individuos", ylim=c(0,25000), lty = 1, lwd = 2)
  lines(tiempo,p_b[,2] , col = "khaki4", type = "l", lty = 1, lwd = 2)
  legend("topleft", legend = c("S_v","R_v"), col = c("mediumblue","khaki4"), lty = c(1,1), cex = 0.5)
}

Graf_Fase_Aguda<-function(Hist_Cel,Hist_V,t_emp,paso){
  tiempo<-seq(0,12,by=paso)
  p_b<-c(Pob_Cel(Hist_Cel,tiempo[1],1,t_emp)$long_r,Pob_V(Hist_V,tiempo[1],1,t_emp)$long_r)   
  for(i in 2:length(tiempo)){
    p_b<-rbind(p_b,c(Pob_Cel(Hist_Cel,tiempo[i],1,t_emp)$long_r,Pob_V(Hist_V,tiempo[i],1,t_emp)$long_r))
    print(tiempo[i])
  }
  plot(tiempo,p_b[,1],main="Fase Aguda: Gillespie en Lisis", type = "l", frame = FALSE,col = "turquoise1", xlab = "Tiempo (días)", ylab = "Individuos", ylim=c(0,25000), lty = 1, lwd = 2)
  lines(tiempo,p_b[,2] , col = "mediumblue", type = "l", lty = 1, lwd = 2)
  legend("right", legend = c("S","S_v"), col = c("turquoise1","mediumblue"), lty = c(1,1), cex = 0.5)
}

Graf_Cel_L(M_Cel_l,12.0001,0.2)
Graf_V(M_V_l,12.0001,0.2) 
Graf_Cel_B(M_Cel_b,12.000004,0.1)
Graf_V(M_V_b,12.000004,0.1)
Graf_Fase_Aguda(M_Cel_l,M_V_l,12.0001,0.1)

ls()
remove(list = ls())
gc()
